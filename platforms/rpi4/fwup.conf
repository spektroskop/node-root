require-fwup-version="0.15.0"

define(UBOOT_ENV_OFFSET, 16)
define(UBOOT_ENV_COUNT, 16)

define(BOOT_PART_COUNT, 102400)

define(BOOT1_PART_OFFSET, 63)
define(BOOT1_PART_COUNT, ${BOOT_PART_COUNT})

define-eval(BOOT2_PART_OFFSET, "${BOOT1_PART_OFFSET} + ${BOOT1_PART_COUNT}")
define(BOOT2_PART_COUNT, ${BOOT_PART_COUNT})

define-eval(OVERLAY_PART_OFFSET, "${BOOT2_PART_OFFSET} + ${BOOT2_PART_COUNT}")
define(OVERLAY_PART_COUNT, 204800)

file-resource bcm2711-rpi-4-b.dtb { host-path = "${BINARIES_DIR}/bcm2711-rpi-4-b.dtb" }
file-resource cmdline.txt { host-path = "${BINARIES_DIR}/rpi-firmware/cmdline.txt" }
file-resource config.txt { host-path = "${BINARIES_DIR}/rpi-firmware/config.txt" }
file-resource fixup.dat { host-path = "${BINARIES_DIR}/rpi-firmware/fixup4.dat" }
file-resource kernel.img { host-path = "${BINARIES_DIR}/Image" }
file-resource start.elf { host-path = "${BINARIES_DIR}/rpi-firmware/start4.elf" }

mbr mbr-1 {
    partition 0 {
        block-offset = ${BOOT1_PART_OFFSET}
        block-count = ${BOOT1_PART_COUNT}
        type = 0xc # FAT32
        boot = true
    }

    partition 1 {
        block-offset = ${OVERLAY_PART_OFFSET}
        block-count = ${OVERLAY_PART_COUNT}
        type = 0x83 # Linux
        expand = true
    }
}

mbr mbr-2 {
    partition 0 {
        block-offset = ${BOOT2_PART_OFFSET}
        block-count = ${BOOT2_PART_COUNT}
        type = 0xc # FAT32
        boot = true
    }

    partition 1 {
        block-offset = ${OVERLAY_PART_OFFSET}
        block-count = ${OVERLAY_PART_COUNT}
        type = 0x83 # Linux
        expand = true
    }
}

uboot-environment uboot-env {
    block-offset = ${UBOOT_ENV_OFFSET}
    block-count = ${UBOOT_ENV_COUNT}
}

task complete {
    require-unmounted-destination = true

    on-init {
        mbr_write(mbr-1)

        fat_mkfs(${BOOT1_PART_OFFSET}, ${BOOT1_PART_COUNT})
        fat_setlabel(${BOOT1_PART_OFFSET}, "BOOT-1")
        fat_mkdir(${BOOT1_PART_OFFSET}, "overlays")

        uboot_clearenv(uboot-env)
        uboot_setenv(uboot-env, "active-partition", "1")
    }

    on-resource bcm2711-rpi-4-b.dtb { fat_write(${BOOT1_PART_OFFSET}, "bcm2711-rpi-4-b.dtb") }
    on-resource cmdline.txt { fat_write(${BOOT1_PART_OFFSET}, "cmdline.txt") }
    on-resource config.txt { fat_write(${BOOT1_PART_OFFSET}, "config.txt") }
    on-resource fixup.dat { fat_write(${BOOT1_PART_OFFSET}, "fixup.dat") }
    on-resource kernel.img { fat_write(${BOOT1_PART_OFFSET}, "kernel.img") }
    on-resource start.elf { fat_write(${BOOT1_PART_OFFSET}, "start.elf") }

    on-finish {
        raw_memset(${BOOT2_PART_OFFSET}, 256, 0xff)
        raw_memset(${OVERLAY_PART_OFFSET}, 256, 0xff)
    }
}

task activate-1 {
    on-init {
        info("Activate partition 1")

        fat_mkfs(${BOOT1_PART_OFFSET}, ${BOOT1_PART_COUNT})
        fat_setlabel(${BOOT1_PART_OFFSET}, "BOOT-1")
        fat_mkdir(${BOOT1_PART_OFFSET}, "overlays")
    }

    on-resource bcm2711-rpi-4-b.dtb { fat_write(${BOOT1_PART_OFFSET}, "bcm2711-rpi-4-b.dtb") }
    on-resource cmdline.txt { fat_write(${BOOT1_PART_OFFSET}, "cmdline.txt") }
    on-resource config.txt { fat_write(${BOOT1_PART_OFFSET}, "config.txt") }
    on-resource fixup.dat { fat_write(${BOOT1_PART_OFFSET}, "fixup.dat") }
    on-resource kernel.img { fat_write(${BOOT1_PART_OFFSET}, "kernel.img") }
    on-resource start.elf { fat_write(${BOOT1_PART_OFFSET}, "start.elf") }

    on-finish {
        uboot_setenv(uboot-env, "active-partition", "1")
        mbr_write(mbr-1)
    }
}

task activate-2 {
    on-init {
        info("Activate partition 2")

        fat_mkfs(${BOOT2_PART_OFFSET}, ${BOOT2_PART_COUNT})
        fat_setlabel(${BOOT2_PART_OFFSET}, "BOOT-2")
        fat_mkdir(${BOOT2_PART_OFFSET}, "overlays")
    }

    on-resource bcm2711-rpi-4-b.dtb { fat_write(${BOOT2_PART_OFFSET}, "bcm2711-rpi-4-b.dtb") }
    on-resource cmdline.txt { fat_write(${BOOT2_PART_OFFSET}, "cmdline.txt") }
    on-resource config.txt { fat_write(${BOOT2_PART_OFFSET}, "config.txt") }
    on-resource fixup.dat { fat_write(${BOOT2_PART_OFFSET}, "fixup.dat") }
    on-resource kernel.img { fat_write(${BOOT2_PART_OFFSET}, "kernel.img") }
    on-resource start.elf { fat_write(${BOOT2_PART_OFFSET}, "start.elf") }

    on-finish {
        uboot_setenv(uboot-env, "active-partition", "2")
        mbr_write(mbr-2)
    }
}

task revert-1 {
    require-partition-offset(0, ${BOOT2_PART_OFFSET})
    require-uboot-variable(uboot-env, "active-partition", "2")

    on-init {
        info("Revert to partition 1")
        uboot_setenv(uboot-env, "active-partition", "1")
        mbr_write(mbr-1)
    }
}

task revert-2 {
    require-partition-offset(0, ${BOOT1_PART_OFFSET})
    require-uboot-variable(uboot-env, "active-partition", "1")

    on-init {
        info("Revert to partition 2")
        uboot_setenv(uboot-env, "active-partition", "2")
        mbr_write(mbr-2)
    }
}
